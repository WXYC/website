# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
  blog(relativePath: String): Blog!
  blogConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: BlogFilter): BlogConnection!
  archive(relativePath: String): Archive!
  archiveConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ArchiveFilter): ArchiveConnection!
  category(relativePath: String): Category!
  categoryConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: CategoryFilter): CategoryConnection!
}

input DocumentFilter {
  page: PageFilter
  blog: BlogFilter
  archive: ArchiveFilter
  category: CategoryFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Page | Blog | Archive | Category | Folder

type Page implements Node & Document {
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input PageBodyPhotoGalleryFilter {
  photos: ImageFilter
}

input PageBodyFilter {
  photoGallery: PageBodyPhotoGalleryFilter
}

input PageFilter {
  body: PageBodyFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

union BlogCategoriesCategory = Category

type BlogCategories {
  category: BlogCategoriesCategory
}

type Blog implements Node & Document {
  title: String
  author: String
  cover: String
  categories: [BlogCategories]
  published: String
  description: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input BlogCategoriesCategoryFilter {
  category: CategoryFilter
}

input BlogCategoriesFilter {
  category: BlogCategoriesCategoryFilter
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input BlogFilter {
  title: StringFilter
  author: StringFilter
  cover: ImageFilter
  categories: BlogCategoriesFilter
  published: DatetimeFilter
  description: StringFilter
  body: RichTextFilter
}

type BlogConnectionEdges {
  cursor: String!
  node: Blog
}

type BlogConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [BlogConnectionEdges]
}

union ArchiveCategoriesCategory = Category

type ArchiveCategories {
  category: ArchiveCategoriesCategory
}

type Archive implements Node & Document {
  title: String
  cover: String
  categories: [ArchiveCategories]
  published: String
  description: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ArchiveCategoriesCategoryFilter {
  category: CategoryFilter
}

input ArchiveCategoriesFilter {
  category: ArchiveCategoriesCategoryFilter
}

input ArchiveFilter {
  title: StringFilter
  cover: ImageFilter
  categories: ArchiveCategoriesFilter
  published: DatetimeFilter
  description: RichTextFilter
}

type ArchiveConnectionEdges {
  cursor: String!
  node: Archive
}

type ArchiveConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ArchiveConnectionEdges]
}

type Category implements Node & Document {
  title: String
  specialtyShow: Boolean
  description: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input CategoryFilter {
  title: StringFilter
  specialtyShow: BooleanFilter
  description: StringFilter
}

type CategoryConnectionEdges {
  cursor: String!
  node: Category
}

type CategoryConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [CategoryConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updateBlog(relativePath: String!, params: BlogMutation!): Blog!
  createBlog(relativePath: String!, params: BlogMutation!): Blog!
  updateArchive(relativePath: String!, params: ArchiveMutation!): Archive!
  createArchive(relativePath: String!, params: ArchiveMutation!): Archive!
  updateCategory(relativePath: String!, params: CategoryMutation!): Category!
  createCategory(relativePath: String!, params: CategoryMutation!): Category!
}

input DocumentUpdateMutation {
  page: PageMutation
  blog: BlogMutation
  archive: ArchiveMutation
  category: CategoryMutation
  relativePath: String
}

input DocumentMutation {
  page: PageMutation
  blog: BlogMutation
  archive: ArchiveMutation
  category: CategoryMutation
}

input PageMutation {
  body: JSON
}

input BlogCategoriesMutation {
  category: String
}

input BlogMutation {
  title: String
  author: String
  cover: String
  categories: [BlogCategoriesMutation]
  published: String
  description: String
  body: JSON
}

input ArchiveCategoriesMutation {
  category: String
}

input ArchiveMutation {
  title: String
  cover: String
  categories: [ArchiveCategoriesMutation]
  published: String
  description: JSON
}

input CategoryMutation {
  title: String
  specialtyShow: Boolean
  description: String
}

schema {
  query: Query
  mutation: Mutation
}
